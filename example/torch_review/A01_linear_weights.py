"""
nn.Linear(16, 6, bias=True) 不仅定义了形状，也开辟了空间，初始化了随机的权重和偏置
"""

from torch import nn

li = nn.Linear(16, 6, bias=True)

print(li.weight.shape)  # torch.Size([6, 16])
print(li.bias.shape)    # torch.Size([6])

print(li.weight.dtype)  # torch.float32
print(li.bias.dtype)    # torch.float32

"""
Parameter containing:
tensor([[-0.2219,  0.1853,  0.0506, -0.1788,  0.1866, -0.0063,  0.1892, -0.2453,
         -0.1223,  0.1089,  0.2359, -0.2313,  0.0720,  0.2097, -0.0387,  0.0502],
        [-0.0370,  0.2100, -0.1707, -0.2147, -0.0312, -0.1206, -0.0410,  0.0965,
         -0.1373,  0.2201,  0.2402,  0.1198, -0.0794, -0.2080,  0.1772,  0.1830],
        [-0.0955, -0.2294, -0.2119,  0.1138,  0.0742,  0.1355, -0.0802, -0.1559,
         -0.1637,  0.1026, -0.0242,  0.0003,  0.1397, -0.2291, -0.0305,  0.1884],
        [ 0.0651, -0.0705, -0.1205,  0.0819, -0.2177, -0.1752, -0.1417,  0.1660,
          0.1695, -0.2154,  0.1364,  0.1048, -0.1606,  0.1075, -0.1717,  0.1487],
        [ 0.0434, -0.2352,  0.2146,  0.1124, -0.1676,  0.2376,  0.0133,  0.0990,
         -0.1274,  0.1382, -0.0996, -0.0294, -0.1330, -0.0579, -0.0173,  0.0608],
        [ 0.1231,  0.0021,  0.0191, -0.1541, -0.0654, -0.1187, -0.0385, -0.1561,
         -0.1389, -0.1926, -0.2081, -0.0473,  0.1127,  0.0171, -0.2212,  0.1752]],
       requires_grad=True)
"""
print(li.weight)

"""
Parameter containing:
tensor([-0.2195, -0.1712, -0.2012, -0.0645,  0.1930, -0.2283],
       requires_grad=True)
"""
print(li.bias)
